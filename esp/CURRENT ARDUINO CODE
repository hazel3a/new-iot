// MQ-5 Gas Sensor with Non-Blocking Supabase Integration + WiFi Provisioning
// Based on working sensor code - WiFi operations will NOT interfere with readings

#include <WiFi.h>
#include <WebServer.h>
#include <Preferences.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// WiFi Provisioning Configuration
const char* AP_SSID = "GasDetector_Setup";
const char* AP_PASSWORD = "gasdetector123";
const IPAddress AP_IP(192, 168, 4, 1);
const IPAddress AP_GATEWAY(192, 168, 4, 1);
const IPAddress AP_SUBNET(255, 255, 255, 0);

// WiFi credentials (your original working credentials as fallback)
const char* ssid = "ZTE_2.4G_TyAT4L";        
const char* password = "KiUrjKeR";

// Pin definitions
const int GAS_SENSOR_PIN = 34;  // Using GPIO 34 since it works in your simple code
const int STATUS_LED_PIN = 2;   // Built-in LED for status indication

// Device identification
const String DEVICE_ID = "ESP32_002";
const String DEVICE_NAME = "Hazel's Kitchen";

// Calibration variables
int baselineReading = 0;         
const int CALIBRATION_SAMPLES = 50; 

// Threshold levels (based on deviation from clean air baseline)
// Based on LPG gas leak ranges and international safety standards
const int SAFE_THRESHOLD = 100;          
const int WARNING_THRESHOLD = 300;      
const int DANGER_THRESHOLD = 600;       
const int CRITICAL_THRESHOLD = 1000;     

// Supabase configuration
const char* supabaseUrl = "https://zbtqfdifmvwyvabydbog.supabase.co";
const char* supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpidHFmZGlmbXZ3eXZhYnlkYm9nIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk2NDc3MTYsImV4cCI6MjA2NTIyMzcxNn0.2GX6D42jgxoCLo1H63viR8PE_LPOrtXgXcNzciNBE6s";
const String supabaseTable = "gas_sensor_readings";

// Global variables for WiFi provisioning
Preferences preferences;
WebServer server(80);
String savedSSID = "";
String savedPassword = "";
bool isProvisioned = false;
bool isAPMode = false;

// Sensor variables (keep exactly as in working code)
int gasValue = 0;
int gasDeviation = 0;            
String gasLevel = "";
unsigned long lastReadTime = 0;
const unsigned long READ_INTERVAL = 1000; 

// WiFi variables (completely separate from sensor)
unsigned long lastWiFiCheck = 0;
unsigned long lastUploadAttempt = 0;
const unsigned long WIFI_CHECK_INTERVAL = 15000;  // Check WiFi every 15 seconds
const unsigned long UPLOAD_INTERVAL = 1000;      // Try upload every 1 second
bool wifiConnected = false;
bool uploadInProgress = false;

// Data buffer for when WiFi is not available
struct SensorReading {
  String deviceId;
  String deviceName;
  int gasValue;
  String gasLevel;
  int deviation;
  int baseline;
  unsigned long timestamp;
};

SensorReading latestReading;
bool hasNewData = false;

void setup() {
  Serial.begin(115200);
  Serial.println("=================================");
  Serial.println("ESP32 MQ-5 Gas Sensor Monitor");
  Serial.println("=================================");
  
  // Initialize pins and preferences for WiFi provisioning
  pinMode(STATUS_LED_PIN, OUTPUT);
  // Set ADC resolution (ESP32 default is 12-bit = 0-4095)
  analogReadResolution(12);
  preferences.begin("wifi-config", false);
  
  // Load saved WiFi credentials
  savedSSID = preferences.getString("ssid", "");
  savedPassword = preferences.getString("password", "");
  
  // Try to connect with priority: saved credentials > default credentials > AP mode
  if (savedSSID.length() > 0 && savedPassword.length() > 0) {
    Serial.println("Attempting connection with saved credentials...");
    if (connectToWiFi(savedSSID, savedPassword)) {
      isProvisioned = true;
      Serial.println("✓ Connected with saved credentials!");
      startNormalOperation();
    } else {
      Serial.println("✗ Saved credentials failed, trying defaults...");
      if (connectToWiFi(String(ssid), String(password))) {
        isProvisioned = true;
        Serial.println("✓ Connected with default credentials!");
        startNormalOperation();
      } else {
        Serial.println("✗ All credentials failed. Starting AP mode...");
        startAPMode();
      }
    }
  } else {
    Serial.println("No saved credentials, trying defaults...");
    if (connectToWiFi(String(ssid), String(password))) {
      isProvisioned = true;
      Serial.println("✓ Connected with default credentials!");
      startNormalOperation();
    } else {
      Serial.println("✗ Default credentials failed. Starting AP mode...");
      startAPMode();
    }
  }
}

void startNormalOperation() {
  Serial.println("System initialized!");
  Serial.println("Warming up sensor... (60 seconds)");
  
  // Sensor warm-up period (exactly as in working code)
  for(int i = 60; i > 0; i--) {
    Serial.print("Warm-up: ");
    Serial.print(i);
    Serial.print(" seconds remaining - Reading: ");
    
    // Show readings during warm-up to verify sensor works
    int reading = analogRead(GAS_SENSOR_PIN);
    Serial.println(reading);
    blinkStatusLED(100);
    delay(1000);
  }
  
  Serial.println("Calibrating sensor in clean air...");
  calibrateSensor();
  
  Serial.println("Sensor ready! Starting monitoring...");
  Serial.println("Baseline reading: " + String(baselineReading));
  Serial.println("Thresholds (deviation from baseline):");
  Serial.println("- Safe: < " + String(SAFE_THRESHOLD));
  Serial.println("- Warning: " + String(SAFE_THRESHOLD) + "-" + String(WARNING_THRESHOLD));
  Serial.println("- Danger: " + String(WARNING_THRESHOLD) + "-" + String(DANGER_THRESHOLD));
  Serial.println("- Critical: > " + String(DANGER_THRESHOLD));
  Serial.println("=================================");
}

void loop() {
  if (isAPMode) {
    // Handle web server requests in AP mode
    server.handleClient();
    blinkStatusLED(1000); // Slow blink in AP mode
  } else if (isProvisioned) {
    // PRIORITY 1: Always read sensor first (exactly as working code)
    if (millis() - lastReadTime >= READ_INTERVAL) {
      readGasSensor();
      lastReadTime = millis();
    }
    
    // PRIORITY 2: Check WiFi status (non-blocking, infrequent)
    if (millis() - lastWiFiCheck >= WIFI_CHECK_INTERVAL) {
      checkWiFiStatus();
      lastWiFiCheck = millis();
    }
    
    // PRIORITY 3: Upload data if possible (non-blocking)
    if (!uploadInProgress && hasNewData && wifiConnected && 
        millis() - lastUploadAttempt >= UPLOAD_INTERVAL) {
      uploadDataAsync();
      lastUploadAttempt = millis();
    }
    
    blinkStatusLED(100); // Fast blink when operating normally
  }
  
  delay(isAPMode ? 10 : 100); // Same as working code
}

void readGasSensor() {
  // EXACT SAME CODE AS YOUR WORKING VERSION
  gasValue = analogRead(GAS_SENSOR_PIN);
  
  // Calculate deviation from baseline
  gasDeviation = abs(gasValue - baselineReading);
  
  // Determine gas level based on thresholds
  determineGasLevel();
  
  // Print readings to serial monitor
  printGasReading();
  
  // Handle alerts
  handleAlerts();
  
  // Store for upload (doesn't interfere with sensor)
  storeReading();
}

void determineGasLevel() {
  // EXACT SAME CODE AS YOUR WORKING VERSION
  if (gasDeviation < SAFE_THRESHOLD) {
    gasLevel = "SAFE";
  } else if (gasDeviation < WARNING_THRESHOLD) {
    gasLevel = "WARNING";
  } else if (gasDeviation < DANGER_THRESHOLD) {
    gasLevel = "DANGER";
  } else {
    gasLevel = "CRITICAL";
  }
}

void printGasReading() {
  // EXACT SAME CODE AS YOUR WORKING VERSION + WiFi status
  Serial.print("[");
  Serial.print(millis()/1000);
  Serial.print("s] Raw: ");
  Serial.print(gasValue);
  Serial.print(" | Baseline: ");
  Serial.print(baselineReading);
  Serial.print(" | Deviation: ");
  Serial.print(gasDeviation);
  Serial.print(" | Level: ");
  Serial.print(gasLevel);
  
  // Add WiFi status indicator
  if (wifiConnected) {
    Serial.print(" | WiFi: ✓");
  } else {
    Serial.print(" | WiFi: ✗");
  }
  
  // Add visual indicator
  if (gasLevel == "SAFE") {
    Serial.println(" ✓");
  } else if (gasLevel == "WARNING") {
    Serial.println(" ⚠");
  } else if (gasLevel == "DANGER") {
    Serial.println(" ⚠⚠");
  } else {
    Serial.println(" 🚨🚨🚨");
  }
}

void handleAlerts() {
  // EXACT SAME CODE AS YOUR WORKING VERSION
  if (gasLevel == "WARNING") {
    Serial.println(">>> WARNING: Gas levels elevated! Check ventilation.");
  } else if (gasLevel == "DANGER") {
    Serial.println(">>> DANGER: High gas levels detected! Take immediate action!");
  } else if (gasLevel == "CRITICAL") {
    Serial.println(">>> CRITICAL ALERT: Extremely high gas levels! EVACUATE AREA!");
    Serial.println(">>> Turn off gas sources and ensure proper ventilation!");
  }
}

void calibrateSensor() {
  // EXACT SAME CODE AS YOUR WORKING VERSION
  long sum = 0;
  Serial.println("Taking calibration readings...");
  
  for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
    int reading = analogRead(GAS_SENSOR_PIN);
    sum += reading;
    Serial.print("Sample ");
    Serial.print(i + 1);
    Serial.print("/");
    Serial.print(CALIBRATION_SAMPLES);
    Serial.print(": ");
    Serial.println(reading);
    delay(100);
  }
  
  baselineReading = sum / CALIBRATION_SAMPLES;
  Serial.println("Calibration complete!");
  Serial.println("Baseline established at: " + String(baselineReading));
}

bool connectToWiFi(String ssid, String password) {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid.c_str(), password.c_str());
  
  int attempts = 0;
  const int maxAttempts = 20; // 10 seconds timeout
  
  Serial.print("Connecting to WiFi: " + ssid);
  while (WiFi.status() != WL_CONNECTED && attempts < maxAttempts) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("✓ WiFi connected successfully!");
    Serial.println("IP address: " + WiFi.localIP().toString());
    Serial.println("Signal strength: " + String(WiFi.RSSI()) + " dBm");
    wifiConnected = true;
    return true;
  } else {
    Serial.println();
    Serial.println("✗ WiFi connection failed!");
    wifiConnected = false;
    return false;
  }
}

void startAPMode() {
  Serial.println("Starting Access Point mode...");
  isAPMode = true;
  
  // Set up access point
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(AP_IP, AP_GATEWAY, AP_SUBNET);
  WiFi.softAP(AP_SSID, AP_PASSWORD);
  
  Serial.println("Access Point started!");
  Serial.println("SSID: " + String(AP_SSID));
  Serial.println("Password: " + String(AP_PASSWORD));
  Serial.println("IP address: " + WiFi.softAPIP().toString());
  Serial.println("Connect to this network and go to http://192.168.4.1");
  
  // Set up web server routes
  server.on("/", handleRoot);
  server.on("/save", HTTP_POST, handleSave);
  server.on("/status", handleStatus);
  server.onNotFound(handleNotFound);
  
  server.begin();
  Serial.println("Web server started!");
}

void handleRoot() {
  String html = "<!DOCTYPE html><html><head>";
  html += "<meta charset='utf-8'>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<title>" + DEVICE_NAME + " - WiFi Setup</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f0f0f0; }";
  html += ".container { max-width: 400px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }";
  html += "h1 { color: #333; text-align: center; margin-bottom: 10px; }";
  html += ".device-info { text-align: center; color: #666; margin-bottom: 30px; }";
  html += ".form-group { margin-bottom: 20px; }";
  html += "label { display: block; margin-bottom: 5px; color: #555; font-weight: bold; }";
  html += "input, select { width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 5px; font-size: 16px; box-sizing: border-box; }";
  html += "input:focus, select:focus { border-color: #4CAF50; outline: none; }";
  html += "button { background: #4CAF50; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; width: 100%; margin-top: 10px; }";
  html += "button:hover { background: #45a049; }";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>🛡️ Gas Detector<br>WiFi Setup</h1>";
  html += "<div class='device-info'>Device: " + DEVICE_NAME + "<br>ID: " + DEVICE_ID + "</div>";
  html += "<form action='/save' method='POST'>";
  html += "<div class='form-group'>";
  html += "<label for='ssid'>WiFi Network (SSID):</label>";
  html += "<input type='text' id='ssid' name='ssid' required placeholder='Enter your WiFi network name'>";
  html += "</div>";
  html += "<div class='form-group'>";
  html += "<label for='pass'>WiFi Password:</label>";
  html += "<input type='password' id='pass' name='pass' required placeholder='Enter your WiFi password'>";
  html += "</div>";
  html += "<button type='submit'>Save WiFi Settings</button>";
  html += "</form>";
  html += "<div style='text-align: center; margin-top: 30px; color: #666; font-size: 14px;'>";
  html += "Device will restart and connect to your WiFi network after saving.";
  html += "</div>";
  html += "</div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleSave() {
  String ssid = server.arg("ssid");
  String password = server.arg("pass");
  
  Serial.println("Received WiFi credentials:");
  Serial.println("SSID: " + ssid);
  // FIXED: Convert the string literal to String object for concatenation
  Serial.println(String("Password: ") + (password.length() > 0 ? "****" : "Empty"));
  
  if (ssid.length() > 0) {
    // Save credentials to preferences
    preferences.putString("ssid", ssid);
    preferences.putString("password", password);
    
    String html = "<!DOCTYPE html><html><head>";
    html += "<meta charset='utf-8'>";
    html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
    html += "<title>WiFi Settings Saved</title>";
    html += "<style>";
    html += "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f0f0f0; }";
    html += ".container { max-width: 400px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); text-align: center; }";
    html += "h1 { color: #4CAF50; margin-bottom: 20px; }";
    html += ".checkmark { font-size: 48px; color: #4CAF50; margin-bottom: 20px; }";
    html += "p { color: #555; line-height: 1.6; }";
    html += "</style></head><body>";
    html += "<div class='container'>";
    html += "<div class='checkmark'>✅</div>";
    html += "<h1>Settings Saved!</h1>";
    html += "<p>WiFi credentials for <strong>" + DEVICE_NAME + "</strong> have been saved successfully.</p>";
    html += "<p>The device will now restart and connect to <strong>" + ssid + "</strong>.</p>";
    html += "<p>You can close this page and reconnect your phone to your regular WiFi network.</p>";
    html += "</div></body></html>";
    
    server.send(200, "text/html", html);
    
    Serial.println("WiFi credentials saved! Restarting in 3 seconds...");
    delay(3000);
    ESP.restart();
  } else {
    server.send(400, "text/html", "Error: SSID cannot be empty!");
  }
}

void handleStatus() {
  String json = "{";
  json += "\"device_id\":\"" + DEVICE_ID + "\",";
  json += "\"device_name\":\"" + DEVICE_NAME + "\",";
  json += "\"ssid\":\"" + savedSSID + "\",";
  json += "\"connected\":" + String(WiFi.status() == WL_CONNECTED ? "true" : "false") + ",";
  json += "\"ip\":\"" + WiFi.localIP().toString() + "\",";
  json += "\"rssi\":" + String(WiFi.RSSI()) + ",";
  json += "\"gas_value\":" + String(gasValue) + ",";
  json += "\"gas_level\":\"" + gasLevel + "\"";
  json += "}";
  
  server.send(200, "application/json", json);
}

void handleNotFound() {
  server.send(404, "text/html", "Page not found. Go to <a href='/'>WiFi Setup</a>");
}

// NON-BLOCKING WiFi and Upload functions
void checkWiFiStatus() {
  if (WiFi.status() == WL_CONNECTED) {
    if (!wifiConnected) {
      Serial.println("✓ WiFi connected: " + WiFi.localIP().toString());
      wifiConnected = true;
    }
  } else {
    if (wifiConnected) {
      Serial.println("✗ WiFi disconnected");
      wifiConnected = false;
      
      // Try to reconnect with saved credentials first, then defaults
      if (savedSSID.length() > 0) {
        WiFi.begin(savedSSID.c_str(), savedPassword.c_str());
      } else {
        WiFi.begin(ssid, password);
      }
    }
  }
}

void storeReading() {
  // Store latest reading for upload
  latestReading.deviceId = DEVICE_ID;
  latestReading.deviceName = DEVICE_NAME;
  latestReading.gasValue = gasValue;
  latestReading.gasLevel = gasLevel;
  latestReading.deviation = gasDeviation;
  latestReading.baseline = baselineReading;
  latestReading.timestamp = millis();
  hasNewData = true;
}

void uploadDataAsync() {
  if (!wifiConnected || uploadInProgress) return;
  
  uploadInProgress = true;
  
  // Use a separate task or simple async approach
  HTTPClient http;
  http.setTimeout(3000); // Short timeout to prevent blocking
  
  String url = String(supabaseUrl) + "/rest/v1/" + supabaseTable;
  
  http.begin(url);
  http.addHeader("Content-Type", "application/json");
  http.addHeader("Prefer", "return=minimal");
  http.addHeader("apikey", supabaseKey);
  http.addHeader("Authorization", "Bearer " + String(supabaseKey));
  
  // Create JSON payload
  DynamicJsonDocument doc(512);
  doc["device_id"] = latestReading.deviceId;
  doc["device_name"] = latestReading.deviceName;
  doc["gas_value"] = latestReading.gasValue;
  doc["gas_level"] = latestReading.gasLevel;
  doc["deviation"] = latestReading.deviation;
  doc["baseline"] = latestReading.baseline;
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  Serial.print("Uploading to Supabase... ");
  
  int httpResponseCode = http.POST(jsonString);
  
  if (httpResponseCode == 201) {
    Serial.println("✓ Upload successful!");
    hasNewData = false; // Mark as uploaded
  } else {
    Serial.println("✗ Upload failed: " + String(httpResponseCode));
  }
  
  http.end();
  uploadInProgress = false;
}

void blinkStatusLED(int interval) {
  static unsigned long lastBlink = 0;
  static bool ledState = false;
  
  if (millis() - lastBlink >= interval) {
    ledState = !ledState;
    digitalWrite(STATUS_LED_PIN, ledState);
    lastBlink = millis();
  }
}

float getGasPercentage() {
  // EXACT SAME CODE AS YOUR WORKING VERSION
  float voltage = (gasValue / 4095.0) * 3.3; 
  float percentage = (voltage / 3.3) * 100;  
  return percentage;
}